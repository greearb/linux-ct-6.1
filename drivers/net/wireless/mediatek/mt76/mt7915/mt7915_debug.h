#ifndef __MT7915_DEBUG_H
#define __MT7915_DEBUG_H

#ifdef MTK_DEBUG

#define DBG_INVALID_BASE		0xffffffff
#define DBG_INVALID_OFFSET		0x0

struct __dbg_map {
	u32 phys;
	u32 maps;
	u32 size;
};

struct __dbg_reg {
	u32 base;
	u32 offs;
};

struct __dbg_mask {
	u32 end;
	u32 start;
};

enum dbg_base_rev {
	MT_DBG_WFDMA0_BASE,
	MT_DBG_WFDMA1_BASE,
	MT_DBG_WFDMA0_PCIE1_BASE,
	MT_DBG_WFDMA1_PCIE1_BASE,
	MT_DBG_WFDMA_EXT_CSR_BASE,
	MT_DBG_SWDEF_BASE,
	__MT_DBG_BASE_REV_MAX,
};

enum dbg_reg_rev {
	DBG_INT_SOURCE_CSR,
	DBG_INT_MASK_CSR,
	DBG_INT1_SOURCE_CSR,
	DBG_INT1_MASK_CSR,
	DBG_TX_RING_BASE,
	DBG_RX_EVENT_RING_BASE,
	DBG_RX_STS_RING_BASE,
	DBG_RX_DATA_RING_BASE,
	DBG_DMA_ICSC_FR0,
	DBG_DMA_ICSC_FR1,
	DBG_TMAC_ICSCR0,
	DBG_RMAC_RXICSRPT,
	DBG_MIB_M0SDR0,
	DBG_MIB_M0SDR3,
	DBG_MIB_M0SDR4,
	DBG_MIB_M0SDR5,
	DBG_MIB_M0SDR7,
	DBG_MIB_M0SDR8,
	DBG_MIB_M0SDR9,
	DBG_MIB_M0SDR10,
	DBG_MIB_M0SDR11,
	DBG_MIB_M0SDR12,
	DBG_MIB_M0SDR14,
	DBG_MIB_M0SDR15,
	DBG_MIB_M0SDR16,
	DBG_MIB_M0SDR17,
	DBG_MIB_M0SDR18,
	DBG_MIB_M0SDR19,
	DBG_MIB_M0SDR20,
	DBG_MIB_M0SDR21,
	DBG_MIB_M0SDR22,
	DBG_MIB_M0SDR23,
	DBG_MIB_M0DR0,
	DBG_MIB_M0DR1,
	DBG_MIB_MUBF,
	DBG_MIB_M0DR6,
	DBG_MIB_M0DR7,
	DBG_MIB_M0DR8,
	DBG_MIB_M0DR9,
	DBG_MIB_M0DR10,
	DBG_MIB_M0DR11,
	DBG_MIB_M0DR12,
	DBG_WTBLON_WDUCR,
	DBG_UWTBL_WDUCR,
	DBG_PLE_DRR_TABLE_CTRL,
	DBG_PLE_DRR_TABLE_RDATA,
	DBG_PLE_PBUF_CTRL,
	DBG_PLE_QUEUE_EMPTY,
	DBG_PLE_FREEPG_CNT,
	DBG_PLE_FREEPG_HEAD_TAIL,
	DBG_PLE_PG_HIF_GROUP,
	DBG_PLE_HIF_PG_INFO,
	DBG_PLE_PG_HIF_TXCMD_GROUP,
	DBG_PLE_HIF_TXCMD_PG_INFO,
	DBG_PLE_PG_CPU_GROUP,
	DBG_PLE_CPU_PG_INFO,
	DBG_PLE_FL_QUE_CTRL,
	DBG_PLE_NATIVE_TXCMD_Q_EMPTY,
	DBG_PLE_TXCMD_Q_EMPTY,
	DBG_PLE_AC_QEMPTY,
	DBG_PLE_AC_OFFSET,
	DBG_PLE_STATION_PAUSE,
	DBG_PLE_DIS_STA_MAP,
	DBG_PSE_PBUF_CTRL,
	DBG_PSE_FREEPG_CNT,
	DBG_PSE_FREEPG_HEAD_TAIL,
	DBG_PSE_HIF0_PG_INFO,
	DBG_PSE_PG_HIF1_GROUP,
	DBG_PSE_HIF1_PG_INFO,
	DBG_PSE_PG_CPU_GROUP,
	DBG_PSE_CPU_PG_INFO,
	DBG_PSE_PG_PLE_GROUP,
	DBG_PSE_PLE_PG_INFO,
	DBG_PSE_PG_LMAC0_GROUP,
	DBG_PSE_LMAC0_PG_INFO,
	DBG_PSE_PG_LMAC1_GROUP,
	DBG_PSE_LMAC1_PG_INFO,
	DBG_PSE_PG_LMAC2_GROUP,
	DBG_PSE_LMAC2_PG_INFO,
	DBG_PSE_PG_LMAC3_GROUP,
	DBG_PSE_LMAC3_PG_INFO,
	DBG_PSE_PG_MDP_GROUP,
	DBG_PSE_MDP_PG_INFO,
	DBG_PSE_PG_PLE1_GROUP,
	DBG_PSE_PLE1_PG_INFO,
	DBG_AGG_AALCR0,
	DBG_AGG_AALCR1,
	DBG_AGG_AALCR2,
	DBG_AGG_AALCR3,
	DBG_AGG_AALCR4,
	DBG_AGG_B0BRR0,
	DBG_AGG_B1BRR0,
	DBG_AGG_B2BRR0,
	DBG_AGG_B3BRR0,
	DBG_AGG_AWSCR0,
	DBG_AGG_PCR0,
	DBG_AGG_TTCR0,
	DBG_MIB_M0ARNG0,
	DBG_MIB_M0DR2,
	DBG_MIB_M0DR13,
	__MT_DBG_REG_REV_MAX,
};

enum dbg_mask_rev {
	DBG_MIB_M0SDR10_RX_MDRDY_COUNT,
	DBG_MIB_M0SDR14_AMPDU,
	DBG_MIB_M0SDR15_AMPDU_ACKED,
	DBG_MIB_RX_FCS_ERROR_COUNT,
	__MT_DBG_MASK_REV_MAX,
};

enum dbg_bit_rev {
	__MT_DBG_BIT_REV_MAX,
};

static const u32 mt7915_dbg_base[] = {
	[MT_DBG_WFDMA0_BASE]		= 0xd4000,
	[MT_DBG_WFDMA1_BASE]		= 0xd5000,
	[MT_DBG_WFDMA0_PCIE1_BASE]	= 0xd8000,
	[MT_DBG_WFDMA1_PCIE1_BASE]	= 0xd9000,
	[MT_DBG_WFDMA_EXT_CSR_BASE]	= 0xd7000,
	[MT_DBG_SWDEF_BASE]		= 0x41f200,
};

static const u32 mt7916_dbg_base[] = {
	[MT_DBG_WFDMA0_BASE]		= 0xd4000,
	[MT_DBG_WFDMA1_BASE]		= 0xd5000,
	[MT_DBG_WFDMA0_PCIE1_BASE]	= 0xd8000,
	[MT_DBG_WFDMA1_PCIE1_BASE]	= 0xd9000,
	[MT_DBG_WFDMA_EXT_CSR_BASE]	= 0xd7000,
	[MT_DBG_SWDEF_BASE]		= 0x411400,
};

static const u32 mt7986_dbg_base[] = {
	[MT_DBG_WFDMA0_BASE]		= 0x24000,
	[MT_DBG_WFDMA1_BASE]		= 0x25000,
	[MT_DBG_WFDMA0_PCIE1_BASE]	= 0x28000,
	[MT_DBG_WFDMA1_PCIE1_BASE]	= 0x29000,
	[MT_DBG_WFDMA_EXT_CSR_BASE]	= 0x27000,
	[MT_DBG_SWDEF_BASE]		= 0x411400,
};

/* mt7915 regs with different base and offset */
static const struct __dbg_reg mt7915_dbg_reg[] = {
	[DBG_INT_SOURCE_CSR]		= { MT_DBG_WFDMA_EXT_CSR_BASE, 0x10 },
	[DBG_INT_MASK_CSR]		= { MT_DBG_WFDMA_EXT_CSR_BASE, 0x14 },
	[DBG_INT1_SOURCE_CSR]		= { MT_DBG_WFDMA_EXT_CSR_BASE, 0x88 },
	[DBG_INT1_MASK_CSR]		= { MT_DBG_WFDMA_EXT_CSR_BASE, 0x8c },
	[DBG_TX_RING_BASE]		= { MT_DBG_WFDMA1_BASE, 0x400 },
	[DBG_RX_EVENT_RING_BASE]	= { MT_DBG_WFDMA1_BASE, 0x500 },
	[DBG_RX_STS_RING_BASE]		= { MT_DBG_WFDMA1_BASE, 0x510 },
	[DBG_RX_DATA_RING_BASE]		= { MT_DBG_WFDMA0_BASE, 0x500 },
	[DBG_DMA_ICSC_FR0]		= { DBG_INVALID_BASE, 0x0f0 },
	[DBG_DMA_ICSC_FR1]		= { DBG_INVALID_BASE, 0x0f4 },
	[DBG_TMAC_ICSCR0]		= { DBG_INVALID_BASE, 0x200 },
	[DBG_RMAC_RXICSRPT]		= { DBG_INVALID_BASE, 0x618},
	[DBG_MIB_M0SDR0]		= { DBG_INVALID_BASE, 0x010},
	[DBG_MIB_M0SDR3]		= { DBG_INVALID_BASE, 0x014},
	[DBG_MIB_M0SDR4]		= { DBG_INVALID_BASE, 0x018},
	[DBG_MIB_M0SDR5]		= { DBG_INVALID_BASE, 0x01c},
	[DBG_MIB_M0SDR7]		= { DBG_INVALID_BASE, 0x024},
	[DBG_MIB_M0SDR8]		= { DBG_INVALID_BASE, 0x028},
	[DBG_MIB_M0SDR9]		= { DBG_INVALID_BASE, 0x02C},
	[DBG_MIB_M0SDR10]		= { DBG_INVALID_BASE, 0x030},
	[DBG_MIB_M0SDR11]		= { DBG_INVALID_BASE, 0x034},
	[DBG_MIB_M0SDR12]		= { DBG_INVALID_BASE, 0x038},
	[DBG_MIB_M0SDR14]		= { DBG_INVALID_BASE, 0x040},
	[DBG_MIB_M0SDR15]		= { DBG_INVALID_BASE, 0x044},
	[DBG_MIB_M0SDR16]		= { DBG_INVALID_BASE, 0x048},
	[DBG_MIB_M0SDR17]		= { DBG_INVALID_BASE, 0x04c},
	[DBG_MIB_M0SDR18]		= { DBG_INVALID_BASE, 0x050},
	[DBG_MIB_M0SDR19]		= { DBG_INVALID_BASE, 0x054},
	[DBG_MIB_M0SDR20]		= { DBG_INVALID_BASE, 0x058},
	[DBG_MIB_M0SDR21]		= { DBG_INVALID_BASE, 0x05c},
	[DBG_MIB_M0SDR22]		= { DBG_INVALID_BASE, 0x060},
	[DBG_MIB_M0SDR23]		= { DBG_INVALID_BASE, 0x064},
	[DBG_MIB_M0DR0]			= { DBG_INVALID_BASE, 0x0a0},
	[DBG_MIB_M0DR1]			= { DBG_INVALID_BASE, 0x0a4},
	[DBG_MIB_MUBF]			= { DBG_INVALID_BASE, 0x090},
	[DBG_MIB_M0DR6]			= { DBG_INVALID_BASE, 0x0b8},
	[DBG_MIB_M0DR7]			= { DBG_INVALID_BASE, 0x0bc},
	[DBG_MIB_M0DR8]			= { DBG_INVALID_BASE, 0x0c0},
	[DBG_MIB_M0DR9]			= { DBG_INVALID_BASE, 0x0c4},
	[DBG_MIB_M0DR10]		= { DBG_INVALID_BASE, 0x0c8},
	[DBG_MIB_M0DR11]		= { DBG_INVALID_BASE, 0x0cc},
	[DBG_MIB_M0DR12]		= { DBG_INVALID_BASE, 0x160},
	[DBG_WTBLON_WDUCR]		= { DBG_INVALID_BASE, 0x0},
	[DBG_UWTBL_WDUCR]		= { DBG_INVALID_BASE, 0x0},
	[DBG_PLE_DRR_TABLE_CTRL]	= { DBG_INVALID_BASE, 0x388},
	[DBG_PLE_DRR_TABLE_RDATA]	= { DBG_INVALID_BASE, 0x350},
	[DBG_PLE_PBUF_CTRL]		= { DBG_INVALID_BASE, 0x014},
	[DBG_PLE_QUEUE_EMPTY]		= { DBG_INVALID_BASE, 0x0b0},
	[DBG_PLE_FREEPG_CNT]		= { DBG_INVALID_BASE, 0x100},
	[DBG_PLE_FREEPG_HEAD_TAIL]	= { DBG_INVALID_BASE, 0x104},
	[DBG_PLE_PG_HIF_GROUP]		= { DBG_INVALID_BASE, 0x110},
	[DBG_PLE_HIF_PG_INFO]		= { DBG_INVALID_BASE, 0x114},
	[DBG_PLE_PG_HIF_TXCMD_GROUP]	= { DBG_INVALID_BASE, 0x120},
	[DBG_PLE_HIF_TXCMD_PG_INFO]	= { DBG_INVALID_BASE, 0x124},
	[DBG_PLE_PG_CPU_GROUP]		= { DBG_INVALID_BASE, 0x150},
	[DBG_PLE_CPU_PG_INFO]		= { DBG_INVALID_BASE, 0x154},
	[DBG_PLE_FL_QUE_CTRL]		= { DBG_INVALID_BASE, 0x1b0},
	[DBG_PLE_NATIVE_TXCMD_Q_EMPTY]	= { DBG_INVALID_BASE, 0x22c},
	[DBG_PLE_TXCMD_Q_EMPTY]		= { DBG_INVALID_BASE, 0x230},
	[DBG_PLE_AC_QEMPTY]		= { DBG_INVALID_BASE, 0x500},
	[DBG_PLE_AC_OFFSET]		= { DBG_INVALID_BASE, 0x040},
	[DBG_PLE_STATION_PAUSE]		= { DBG_INVALID_BASE, 0x400},
	[DBG_PLE_DIS_STA_MAP]		= { DBG_INVALID_BASE, 0x440},
	[DBG_PSE_PBUF_CTRL]		= { DBG_INVALID_BASE, 0x014},
	[DBG_PSE_FREEPG_CNT]		= { DBG_INVALID_BASE, 0x100},
	[DBG_PSE_FREEPG_HEAD_TAIL]	= { DBG_INVALID_BASE, 0x104},
	[DBG_PSE_HIF0_PG_INFO]		= { DBG_INVALID_BASE, 0x114},
	[DBG_PSE_PG_HIF1_GROUP]		= { DBG_INVALID_BASE, 0x118},
	[DBG_PSE_HIF1_PG_INFO]		= { DBG_INVALID_BASE, 0x11c},
	[DBG_PSE_PG_CPU_GROUP]		= { DBG_INVALID_BASE, 0x150},
	[DBG_PSE_CPU_PG_INFO]		= { DBG_INVALID_BASE, 0x154},
	[DBG_PSE_PG_PLE_GROUP]		= { DBG_INVALID_BASE, 0x160},
	[DBG_PSE_PLE_PG_INFO]		= { DBG_INVALID_BASE, 0x164},
	[DBG_PSE_PG_LMAC0_GROUP]	= { DBG_INVALID_BASE, 0x170},
	[DBG_PSE_LMAC0_PG_INFO]		= { DBG_INVALID_BASE, 0x174},
	[DBG_PSE_PG_LMAC1_GROUP]	= { DBG_INVALID_BASE, 0x178},
	[DBG_PSE_LMAC1_PG_INFO]		= { DBG_INVALID_BASE, 0x17c},
	[DBG_PSE_PG_LMAC2_GROUP]	= { DBG_INVALID_BASE, 0x180},
	[DBG_PSE_LMAC2_PG_INFO]		= { DBG_INVALID_BASE, 0x184},
	[DBG_PSE_PG_LMAC3_GROUP]	= { DBG_INVALID_BASE, 0x188},
	[DBG_PSE_LMAC3_PG_INFO]		= { DBG_INVALID_BASE, 0x18c},
	[DBG_PSE_PG_MDP_GROUP]		= { DBG_INVALID_BASE, 0x198},
	[DBG_PSE_MDP_PG_INFO]		= { DBG_INVALID_BASE, 0x19c},
	[DBG_PSE_PG_PLE1_GROUP]		= { DBG_INVALID_BASE, 0x168},
	[DBG_PSE_PLE1_PG_INFO]		= { DBG_INVALID_BASE, 0x16c},
	[DBG_AGG_AALCR0]		= { DBG_INVALID_BASE, 0x048},
	[DBG_AGG_AALCR1]		= { DBG_INVALID_BASE, 0x04c},
	[DBG_AGG_AALCR2]		= { DBG_INVALID_BASE, 0x050},
	[DBG_AGG_AALCR3]		= { DBG_INVALID_BASE, 0x054},
	[DBG_AGG_AALCR4]		= { DBG_INVALID_BASE, 0x058},
	[DBG_AGG_B0BRR0]		= { DBG_INVALID_BASE, 0x100},
	[DBG_AGG_B1BRR0]		= { DBG_INVALID_BASE, 0x104},
	[DBG_AGG_B2BRR0]		= { DBG_INVALID_BASE, 0x108},
	[DBG_AGG_B3BRR0]		= { DBG_INVALID_BASE, 0x10c},
	[DBG_AGG_AWSCR0]		= { DBG_INVALID_BASE, 0x030},
	[DBG_AGG_PCR0]			= { DBG_INVALID_BASE, 0x040},
	[DBG_AGG_TTCR0]			= { DBG_INVALID_BASE, 0x04c},
	[DBG_MIB_M0ARNG0]		= { DBG_INVALID_BASE, 0x4b8},
	[DBG_MIB_M0DR2]			= { DBG_INVALID_BASE, 0x0a8},
	[DBG_MIB_M0DR13]		= { DBG_INVALID_BASE, 0x164},
};

/* mt7986/mt7916 regs with different base and offset */
static const struct __dbg_reg mt7916_dbg_reg[] = {
	[DBG_INT_SOURCE_CSR]		= { MT_DBG_WFDMA0_BASE, 0x200 },
	[DBG_INT_MASK_CSR]		= { MT_DBG_WFDMA0_BASE, 0x204 },
	[DBG_INT1_SOURCE_CSR]		= { MT_DBG_WFDMA0_PCIE1_BASE, 0x200 },
	[DBG_INT1_MASK_CSR]		= { MT_DBG_WFDMA0_PCIE1_BASE, 0x204 },
	[DBG_TX_RING_BASE]		= { MT_DBG_WFDMA0_BASE, 0x400 },
	[DBG_RX_EVENT_RING_BASE]	= { MT_DBG_WFDMA0_BASE, 0x500 },
	[DBG_RX_STS_RING_BASE]		= { MT_DBG_WFDMA0_BASE, 0x520 },
	[DBG_RX_DATA_RING_BASE]		= { MT_DBG_WFDMA0_BASE, 0x540 },
	[DBG_DMA_ICSC_FR0]		= { DBG_INVALID_BASE, 0x05c },
	[DBG_DMA_ICSC_FR1]		= { DBG_INVALID_BASE, 0x060 },
	[DBG_TMAC_ICSCR0]		= { DBG_INVALID_BASE, 0x120 },
	[DBG_RMAC_RXICSRPT]		= { DBG_INVALID_BASE, 0xd0 },
	[DBG_MIB_M0SDR0]		= { DBG_INVALID_BASE, 0x7d8},
	[DBG_MIB_M0SDR3]		= { DBG_INVALID_BASE, 0x698},
	[DBG_MIB_M0SDR4]		= { DBG_INVALID_BASE, 0x788},
	[DBG_MIB_M0SDR5]		= { DBG_INVALID_BASE, 0x780},
	[DBG_MIB_M0SDR7]		= { DBG_INVALID_BASE, 0x5a8},
	[DBG_MIB_M0SDR8]		= { DBG_INVALID_BASE, 0x78c},
	[DBG_MIB_M0SDR9]		= { DBG_INVALID_BASE, 0x024},
	[DBG_MIB_M0SDR10]		= { DBG_INVALID_BASE, 0x76c},
	[DBG_MIB_M0SDR11]		= { DBG_INVALID_BASE, 0x790},
	[DBG_MIB_M0SDR12]		= { DBG_INVALID_BASE, 0x558},
	[DBG_MIB_M0SDR14]		= { DBG_INVALID_BASE, 0x564},
	[DBG_MIB_M0SDR15]		= { DBG_INVALID_BASE, 0x564},
	[DBG_MIB_M0SDR16]		= { DBG_INVALID_BASE, 0x7fc},
	[DBG_MIB_M0SDR17]		= { DBG_INVALID_BASE, 0x800},
	[DBG_MIB_M0SDR18]		= { DBG_INVALID_BASE, 0x030},
	[DBG_MIB_M0SDR19]		= { DBG_INVALID_BASE, 0x5ac},
	[DBG_MIB_M0SDR20]		= { DBG_INVALID_BASE, 0x5b0},
	[DBG_MIB_M0SDR21]		= { DBG_INVALID_BASE, 0x5b4},
	[DBG_MIB_M0SDR22]		= { DBG_INVALID_BASE, 0x770},
	[DBG_MIB_M0SDR23]		= { DBG_INVALID_BASE, 0x774},
	[DBG_MIB_M0DR0]			= { DBG_INVALID_BASE, 0x594},
	[DBG_MIB_M0DR1]			= { DBG_INVALID_BASE, 0x598},
	[DBG_MIB_MUBF]			= { DBG_INVALID_BASE, 0x7ac},
	[DBG_MIB_M0DR6]			= { DBG_INVALID_BASE, 0x658},
	[DBG_MIB_M0DR7]			= { DBG_INVALID_BASE, 0x65c},
	[DBG_MIB_M0DR8]			= { DBG_INVALID_BASE, 0x56c},
	[DBG_MIB_M0DR9]			= { DBG_INVALID_BASE, 0x570},
	[DBG_MIB_M0DR10]		= { DBG_INVALID_BASE, 0x578},
	[DBG_MIB_M0DR11]		= { DBG_INVALID_BASE, 0x574},
	[DBG_MIB_M0DR12]		= { DBG_INVALID_BASE, 0x654},
	[DBG_WTBLON_WDUCR]		= { DBG_INVALID_BASE, 0x200},
	[DBG_UWTBL_WDUCR]		= { DBG_INVALID_BASE, 0x094},
	[DBG_PLE_DRR_TABLE_CTRL]	= { DBG_INVALID_BASE, 0x490},
	[DBG_PLE_DRR_TABLE_RDATA]	= { DBG_INVALID_BASE, 0x470},
	[DBG_PLE_PBUF_CTRL]		= { DBG_INVALID_BASE, 0x004},
	[DBG_PLE_QUEUE_EMPTY]		= { DBG_INVALID_BASE, 0x360},
	[DBG_PLE_FREEPG_CNT]		= { DBG_INVALID_BASE, 0x380},
	[DBG_PLE_FREEPG_HEAD_TAIL]	= { DBG_INVALID_BASE, 0x384},
	[DBG_PLE_PG_HIF_GROUP]		= { DBG_INVALID_BASE, 0x00c},
	[DBG_PLE_HIF_PG_INFO]		= { DBG_INVALID_BASE, 0x388},
	[DBG_PLE_PG_HIF_TXCMD_GROUP]	= { DBG_INVALID_BASE, 0x014},
	[DBG_PLE_HIF_TXCMD_PG_INFO]	= { DBG_INVALID_BASE, 0x390},
	[DBG_PLE_PG_CPU_GROUP]		= { DBG_INVALID_BASE, 0x018},
	[DBG_PLE_CPU_PG_INFO]		= { DBG_INVALID_BASE, 0x394},
	[DBG_PLE_FL_QUE_CTRL]		= { DBG_INVALID_BASE, 0x3e0},
	[DBG_PLE_NATIVE_TXCMD_Q_EMPTY]	= { DBG_INVALID_BASE, 0x370},
	[DBG_PLE_TXCMD_Q_EMPTY]		= { DBG_INVALID_BASE, 0x36c},
	[DBG_PLE_AC_QEMPTY]		= { DBG_INVALID_BASE, 0x600},
	[DBG_PLE_AC_OFFSET]		= { DBG_INVALID_BASE, 0x080},
	[DBG_PLE_STATION_PAUSE]		= { DBG_INVALID_BASE, 0x100},
	[DBG_PLE_DIS_STA_MAP] 		= { DBG_INVALID_BASE, 0x180},
	[DBG_PSE_PBUF_CTRL]		= { DBG_INVALID_BASE, 0x004},
	[DBG_PSE_FREEPG_CNT]		= { DBG_INVALID_BASE, 0x380},
	[DBG_PSE_FREEPG_HEAD_TAIL]	= { DBG_INVALID_BASE, 0x384},
	[DBG_PSE_HIF0_PG_INFO]		= { DBG_INVALID_BASE, 0x150},
	[DBG_PSE_PG_HIF1_GROUP]		= { DBG_INVALID_BASE, 0x154},
	[DBG_PSE_HIF1_PG_INFO]		= { DBG_INVALID_BASE, 0x160},
	[DBG_PSE_PG_CPU_GROUP]		= { DBG_INVALID_BASE, 0x118},
	[DBG_PSE_CPU_PG_INFO]		= { DBG_INVALID_BASE, 0x158},
	[DBG_PSE_PG_PLE_GROUP]		= { DBG_INVALID_BASE, 0x11c},
	[DBG_PSE_PLE_PG_INFO]		= { DBG_INVALID_BASE, 0x15c},
	[DBG_PSE_PG_LMAC0_GROUP]	= { DBG_INVALID_BASE, 0x124},
	[DBG_PSE_LMAC0_PG_INFO]		= { DBG_INVALID_BASE, 0x164},
	[DBG_PSE_PG_LMAC1_GROUP]	= { DBG_INVALID_BASE, 0x128},
	[DBG_PSE_LMAC1_PG_INFO]		= { DBG_INVALID_BASE, 0x168},
	[DBG_PSE_PG_LMAC2_GROUP]	= { DBG_INVALID_BASE, 0x12c},
	[DBG_PSE_LMAC2_PG_INFO]		= { DBG_INVALID_BASE, 0x16c},
	[DBG_PSE_PG_LMAC3_GROUP]	= { DBG_INVALID_BASE, 0x130},
	[DBG_PSE_LMAC3_PG_INFO]		= { DBG_INVALID_BASE, 0x17c},
	[DBG_PSE_PG_MDP_GROUP]		= { DBG_INVALID_BASE, 0x134},
	[DBG_PSE_MDP_PG_INFO]		= { DBG_INVALID_BASE, 0x174},
	[DBG_PSE_PG_PLE1_GROUP]		= { DBG_INVALID_BASE, 0x120},
	[DBG_PSE_PLE1_PG_INFO]		= { DBG_INVALID_BASE, 0x160},
	[DBG_AGG_AALCR0]		= { DBG_INVALID_BASE, 0x028},
	[DBG_AGG_AALCR1]		= { DBG_INVALID_BASE, 0x144},
	[DBG_AGG_AALCR2]		= { DBG_INVALID_BASE, 0x14c},
	[DBG_AGG_AALCR3]		= { DBG_INVALID_BASE, 0x154},
	[DBG_AGG_AALCR4]		= { DBG_INVALID_BASE, 0x02c},
	[DBG_AGG_B0BRR0]		= { DBG_INVALID_BASE, 0x08c},
	[DBG_AGG_B1BRR0]		= { DBG_INVALID_BASE, 0x148},
	[DBG_AGG_B2BRR0]		= { DBG_INVALID_BASE, 0x150},
	[DBG_AGG_B3BRR0]		= { DBG_INVALID_BASE, 0x158},
	[DBG_AGG_AWSCR0]		= { DBG_INVALID_BASE, 0x05c},
	[DBG_AGG_PCR0]			= { DBG_INVALID_BASE,	0x06c},
	[DBG_AGG_TTCR0]			= { DBG_INVALID_BASE, 0x07c},
	[DBG_MIB_M0ARNG0]		= { DBG_INVALID_BASE, 0x0b0},
	[DBG_MIB_M0DR2]			= { DBG_INVALID_BASE, 0x7dc},
	[DBG_MIB_M0DR13]		= { DBG_INVALID_BASE, 0x7ec},
};

static const struct __dbg_mask mt7915_dbg_mask[] = {
	[DBG_MIB_M0SDR10_RX_MDRDY_COUNT]= {25, 0},
	[DBG_MIB_M0SDR14_AMPDU]		= {23, 0},
	[DBG_MIB_M0SDR15_AMPDU_ACKED]	= {23, 0},
	[DBG_MIB_RX_FCS_ERROR_COUNT]	= {15, 0},
};

static const struct __dbg_mask mt7916_dbg_mask[] = {
	[DBG_MIB_M0SDR10_RX_MDRDY_COUNT]= {31, 0},
	[DBG_MIB_M0SDR14_AMPDU]		= {31, 0},
	[DBG_MIB_M0SDR15_AMPDU_ACKED]	= {31, 0},
	[DBG_MIB_RX_FCS_ERROR_COUNT]	= {31, 16},
};

/* used to differentiate between generations */
struct mt7915_dbg_reg_desc {
	const u32 id;
	const u32 *base_rev;
	const struct __dbg_reg *reg_rev;
	const struct __dbg_mask *mask_rev;
};

static const struct mt7915_dbg_reg_desc dbg_reg_s[] = {
	{ 0x7915,
	  mt7915_dbg_base,
	  mt7915_dbg_reg,
	  mt7915_dbg_mask
	},
	{ 0x7906,
	  mt7916_dbg_base,
	  mt7916_dbg_reg,
	  mt7916_dbg_mask
	},
	{ 0x7986,
	  mt7986_dbg_base,
	  mt7916_dbg_reg,
	  mt7916_dbg_mask
	},
};

struct bin_debug_hdr {
	__le32 magic_num;
	__le16 serial_id;
	__le16 msg_type;
	__le16 len;
	__le16 des_len;	/* descriptor len for rxd */
} __packed;

#define __DBG_REG_MAP(_dev, id, ofs)	((_dev)->dbg_reg->base_rev[(id)] + (ofs))
#define __DBG_REG_BASE(_dev, id)	((_dev)->dbg_reg->reg_rev[(id)].base)
#define __DBG_REG_OFFS(_dev, id)	((_dev)->dbg_reg->reg_rev[(id)].offs)

#define __DBG_MASK(_dev, id)		GENMASK((_dev)->dbg_reg->mask_rev[(id)].end,	\
						(_dev)->dbg_reg->mask_rev[(id)].start)
#define __DBG_REG(_dev, id)		__DBG_REG_MAP((_dev), __DBG_REG_BASE((_dev), (id)),	\
						__DBG_REG_OFFS((_dev), (id)))

#define __DBG_FIELD_GET(id, _reg)	(((_reg) & __DBG_MASK(dev, (id))) >>	\
						dev->dbg_reg->mask_rev[(id)].start)
#define __DBG_FIELD_PREP(id, _reg)	(((_reg) << dev->dbg_reg->mask_rev[(id)].start) &	\
						__DBG_MASK(dev, (id)))


#define MT_DBG_TX_RING_BASE			__DBG_REG(dev, DBG_TX_RING_BASE)
#define MT_DBG_RX_EVENT_RING_BASE		__DBG_REG(dev, DBG_RX_EVENT_RING_BASE)
#define MT_DBG_RX_STS_RING_BASE			__DBG_REG(dev, DBG_RX_STS_RING_BASE)
#define MT_DBG_RX_DATA_RING_BASE		__DBG_REG(dev, DBG_RX_DATA_RING_BASE)

#define MT_DBG_TX_RING_CTRL(n)			(MT_DBG_TX_RING_BASE + (0x10 * (n)))
#define MT_DBG_RX_DATA_RING_CTRL(n)		(MT_DBG_RX_DATA_RING_BASE + (0x10 * (n)))
#define MT_DBG_RX_EVENT_RING_CTRL(n)		(MT_DBG_RX_EVENT_RING_BASE + (0x10 * (n)))

/* WFDMA COMMON */
#define MT_DBG_INT_SOURCE_CSR			__DBG_REG(dev, DBG_INT_SOURCE_CSR)
#define MT_DBG_INT_MASK_CSR			__DBG_REG(dev, DBG_INT_MASK_CSR)
#define MT_DBG_INT1_SOURCE_CSR			__DBG_REG(dev, DBG_INT1_SOURCE_CSR)
#define MT_DBG_INT1_MASK_CSR			__DBG_REG(dev, DBG_INT1_MASK_CSR)

/* WFDMA0 */
#define MT_DBG_WFDMA0(_ofs)			__DBG_REG_MAP(dev, MT_DBG_WFDMA0_BASE, (_ofs))

#define MT_DBG_WFDMA0_INT_SOURCE_CSR		MT_DBG_WFDMA0(0x200)
#define MT_DBG_WFDMA0_INT_MASK_CSR		MT_DBG_WFDMA0(0x204)

#define MT_DBG_WFDMA0_GLO_CFG			MT_DBG_WFDMA0(0x208)
#define MT_DBG_WFDMA0_GLO_CFG_TX_DMA_EN		BIT(0)
#define MT_DBG_WFDMA0_GLO_CFG_RX_DMA_EN		BIT(2)
#define MT_DBG_WFDMA0_GLO_CFG_TX_BUSY_MASK	BIT(1)
#define MT_DBG_WFDMA0_GLO_CFG_RX_BUSY_MASK	BIT(3)


/* WFDMA1 */
#define MT_DBG_WFDMA1(_ofs)			__DBG_REG_MAP(dev, MT_DBG_WFDMA1_BASE, (_ofs))
#define MT_DBG_WFDMA1_INT_SOURCE_CSR		MT_DBG_WFDMA1(0x200)
#define MT_DBG_WFDMA1_INT_MASK_CSR		MT_DBG_WFDMA1(0x204)

#define MT_DBG_WFDMA1_GLO_CFG			MT_DBG_WFDMA1(0x208)

#define MT_DBG_WFDMA1_GLO_CFG_TX_DMA_EN		BIT(0)
#define MT_DBG_WFDMA1_GLO_CFG_RX_DMA_EN		BIT(2)
#define MT_DBG_WFDMA1_GLO_CFG_TX_BUSY_MASK	BIT(1)
#define MT_DBG_WFDMA1_GLO_CFG_RX_BUSY_MASK	BIT(3)

/* WFDMA0 PCIE1 */
#define MT_DBG_WFDMA0_PCIE1(_ofs)		__DBG_REG_MAP(dev, MT_DBG_WFDMA0_PCIE1_BASE, (_ofs))

#define MT_DBG_WFDMA0_PCIE1_INT_SOURCE_CSR	MT_DBG_WFDMA0_PCIE1(0x200)
#define MT_DBG_WFDMA0_PCIE1_INT_MASK_CSR	MT_DBG_WFDMA0_PCIE1(0x204)
#define MT_DBG_WFDMA0_PCIE1_GLO_CFG		MT_DBG_WFDMA0_PCIE1(0x208)
#define MT_DBG_WFDMA0_PCIE1_RX1_CTRL0		MT_DBG_WFDMA1_PCIE1(0x510)

#define MT_DBG_WFDMA0_PCIE1_GLO_CFG_TX_DMA_EN		BIT(0)
#define MT_DBG_WFDMA0_PCIE1_GLO_CFG_TX_BUSY_MASK	BIT(1)
#define MT_DBG_WFDMA0_PCIE1_GLO_CFG_RX_DMA_EN		BIT(2)
#define MT_DBG_WFDMA0_PCIE1_GLO_CFG_RX_BUSY_MASK	BIT(3)

/* WFDMA1 PCIE1 */
#define MT_DBG_WFDMA1_PCIE1(_ofs)		__DBG_REG_MAP(dev, MT_DBG_WFDMA1_PCIE1_BASE, (_ofs))
#define MT_DBG_WFDMA1_PCIE1_INT_SOURCE_CSR	MT_DBG_WFDMA1_PCIE1(0x200)
#define MT_DBG_WFDMA1_PCIE1_INT_MASK_CSR	MT_DBG_WFDMA1_PCIE1(0x204)
#define MT_DBG_WFDMA1_PCIE1_GLO_CFG		MT_DBG_WFDMA1_PCIE1(0x208)
#define MT_DBG_WFDMA1_PCIE1_TX19_CTRL0		MT_DBG_WFDMA1_PCIE1(0x330)
#define MT_DBG_WFDMA1_PCIE1_RX2_CTRL0		MT_DBG_WFDMA1_PCIE1(0x520)

#define MT_DBG_WFDMA1_PCIE1_GLO_CFG_TX_DMA_EN		BIT(0)
#define MT_DBG_WFDMA1_PCIE1_GLO_CFG_TX_BUSY_MASK	BIT(1)
#define MT_DBG_WFDMA1_PCIE1_GLO_CFG_RX_DMA_EN		BIT(2)
#define MT_DBG_WFDMA1_PCIE1_GLO_CFG_RX_BUSY_MASK	BIT(3)

#define MT_DBG_WFDMA_HOST_DMA0_GLO_CFG_RX_DMA_EN_MASK	BIT(2)
#define MT_DBG_WFDMA_HOST_DMA0_GLO_CFG_TX_DMA_EN_MASK	BIT(0)
#define MT_DBG_WFDMA_HOST_DMA0_GLO_CFG_RX_DMA_BUSY_MASK	BIT(3)
#define MT_DBG_WFDMA_HOST_DMA0_GLO_CFG_TX_DMA_BUSY_MASK	BIT(1)


/* WF DMA TOP: band 0(0x820E7000),band 1(0x820F7000) */
#define MT_DBG_WF_DMA_BASE(_band)		((_band) ? 0x820F7000 : 0x820E7000)
#define MT_DBG_WF_DMA(_band, ofs)		(MT_WF_DMA_BASE(_band) + (ofs))

#define MT_DBG_DMA_DCR0(_band)			MT_DBG_WF_DMA((_band), 0x000)
#define MT_DBG_DMA_DCR0_MAX_RX_LEN		GENMASK(15, 3)
#define MT_DBG_DMA_DCR0_RXD_G5_EN		BIT(23)

#define MT_DBG_DMA_ICSC_FR0(_band)		MT_DBG_WF_DMA((_band), __DBG_REG_OFFS(dev, DBG_DMA_ICSC_FR0))
#define MT_DBG_DMA_ICSC_FR0_RXBF_EN		BIT(25)
#define MT_DBG_DMA_ICSC_FR0_EN			BIT(24)
#define MT_DBG_DMA_ICSC_FR0_TOUT_MASK		GENMASK(23, 16)
#define MT_DBG_DMA_ICSC_FR0_PID_MASK		GENMASK(9, 8)
#define MT_DBG_DMA_ICSC_FR0_QID_MASK		GENMASK(6, 0)

#define MT_DBG_DMA_ICSC_FR1(_band)		MT_DBG_WF_DMA((_band), __DBG_REG_OFFS(dev, DBG_DMA_ICSC_FR1))
#define MT_DBG_DMA_ICSC_FR1_AGG_SIZE_MASK	GENMASK(26, 16)
#define MT_DBG_DMA_ICSC_FR1_MAX_FRAME_SIZE_MASK	GENMASK(10, 0)

/* TMAC: band 0(0x820e4000), band 1(0x820f4000) */
#define MT_DBG_WF_TMAC_BASE(_band)		((_band) ? 0x820f4000 : 0x820e4000)
#define MT_DBG_WF_TMAC(_band, ofs)		(MT_DBG_WF_TMAC_BASE(_band) + (ofs))

#define MT_DBG_TMAC_ICSCR0(_band)		MT_DBG_WF_TMAC((_band), __DBG_REG_OFFS(dev, DBG_TMAC_ICSCR0))
#define MT_DBG_TMAC_ICSCR0_ICSRPT_EN        	BIT(0)

/* RMAC: band 0(0x820E5000), band 1(0x820f5000) */
#define MT_DBG_WF_RMAC_BASE(_band)		((_band) ? 0x820f5000 : 0x820E5000)
#define MT_DBG_WF_RMAC(_band, ofs)		(MT_DBG_WF_RMAC_BASE(_band) + (ofs))

#define MT_DBG_RMAC_RXICSRPT(_band)		MT_DBG_WF_RMAC((_band), __DBG_REG_OFFS(dev, DBG_RMAC_RXICSRPT))
#define MT_DBG_RMAC_RXICSRPT_ICSRPT_EN		BIT(0)

/* MIB: band 0(0x820ed000), band 1(0x820fd000) */
#define MT_DBG_MIB_BASE(_band)			((_band) ? 0x820fd000 : 0x820ed000)
#define MT_DBG_MIB(_band, ofs)			(MT_DBG_MIB_BASE(_band) + (ofs))


#define MT_DBG_MIB_M0SCR0(_band)		MT_DBG_MIB((_band), 0x00)
#define MT_DBG_MIB_M0PBSCR(_band)		MT_DBG_MIB((_band), 0x04)

#define MT_DBG_MIB_M0SDR0(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR0))
#define MT_DBG_MIB_M0SDR3(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR3))
#define MT_DBG_MIB_RX_FCS_ERROR_COUNT_MASK	__DBG_MASK(dev, DBG_MIB_RX_FCS_ERROR_COUNT)
#define MT_DBG_MIB_M0SDR4(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR4))
#define MT_DBG_MIB_M0SDR5(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR5))
#define MT_DBG_MIB_M0SDR6(_band)		MT_DBG_MIB((_band), 0x20)
#define MT_DBG_MIB_M0SDR7(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR7))
#define MT_DBG_MIB_M0SDR8(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR8))
#define MT_DBG_MIB_M0SDR9(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR9))
#define MT_DBG_MIB_M0SDR10(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR10))
#define MT_DBG_MIB_M0SDR10_RX_MDRDY_COUNT_MASK	__DBG_MASK(dev, DBG_MIB_M0SDR10_RX_MDRDY_COUNT)
#define MT_DBG_MIB_M0SDR11(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR11))

#define MT_DBG_MIB_M0SDR12(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR12))

#define MT_DBG_MIB_M0SDR14(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR14))
#define MT_DBG_MIB_M0SDR14_AMPDU_MASK		__DBG_MASK(dev, DBG_MIB_M0SDR14_AMPDU)
#define MT_DBG_MIB_M0SDR15(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR15))
#define MT_DBG_MIB_M0SDR15_AMPDU_ACKED_MASK	__DBG_MASK(dev, DBG_MIB_M0SDR15_AMPDU_ACKED)
#define MT_DBG_MIB_M0SDR16(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR16))
#define MT_DBG_MIB_M0SDR17(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR17))
#define MT_DBG_MIB_M0SDR18(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR18))
#define MT_DBG_MIB_M0SDR19(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR19))
#define MT_DBG_MIB_M0SDR20(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR20))
#define MT_DBG_MIB_M0SDR21(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR21))
#define MT_DBG_MIB_M0SDR22(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR22))
#define MT_DBG_MIB_M0SDR23(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0SDR23))
#define MT_DBG_MIB_M0DR0(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR0))
#define MT_DBG_MIB_M0DR1(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR1))

#define MT_DBG_MIB_MUBF(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_MUBF))
#define MT_DBG_MIB_M0DR6(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR6))
#define MT_DBG_MIB_M0DR7(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR7))
#define MT_DBG_MIB_M0DR8(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR8))
#define MT_DBG_MIB_M0DR9(_band)			MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR9))
#define MT_DBG_MIB_M0DR10(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR10))
#define MT_DBG_MIB_M0DR11(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR11))
 #define MT_DBG_MIB_M0DR12(_band)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR12))

/* WTBLON TOP: 0x820D4000/pcie(0x34000) rbus(0x434000) */
#define MT_DBG_WTBLON_TOP_BASE			0x820D4000
#define MT_DBG_WTBLON_TOP(ofs)			(MT_WTBLON_TOP_BASE + (ofs))
#define MT_DBG_WTBLON_TOP_WDUCR			MT_DBG_WTBLON_TOP(__DBG_REG_OFFS(dev, DBG_WTBLON_WDUCR))
#define MT_DBG_WTBLON_TOP_WDUCR_GROUP		GENMASK(2, 0)

#define WF_WTBLON_TOP_B0BTCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1000) // 5000
#define WF_WTBLON_TOP_B0BTBCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1010) // 5010
#define WF_WTBLON_TOP_B0BRCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1020) // 5020
#define WF_WTBLON_TOP_B0BRBCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1030) // 5030
#define WF_WTBLON_TOP_B0BTDCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1040) // 5040
#define WF_WTBLON_TOP_B0BRDCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1050) // 5050
#define WF_WTBLON_TOP_B0MBTCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1100) // 5100
#define WF_WTBLON_TOP_B0MBTBCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1140) // 5140
#define WF_WTBLON_TOP_B0MBRCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1180) // 5180
#define WF_WTBLON_TOP_B0MBRBCRn_ADDR 		(MT_DBG_WTBLON_TOP_BASE + 0x11C0) // 51C0

#define WF_WTBLON_TOP_B1BTCRn_ADDR		(MT_DBG_WTBLON_TOP_BASE + 0x1800) // 5800

/* WTBLON TOP: 0x820C4000/pcie(0xa8000) rbus(0x4a8000) */
#define MT_DBG_UWTBL_TOP_BASE			0x820C4000
#define MT_DBG_UWTBL_TOP(ofs)			(MT_DBG_UWTBL_TOP_BASE + (ofs))

#define MT_DBG_UWTBL_TOP_WDUCR			MT_DBG_UWTBL_TOP(__DBG_REG_OFFS(dev, DBG_UWTBL_WDUCR))

#define MT_UWTBL_TOP_WDUCR_TARGET		BIT(31)
#define MT_UWTBL_TOP_WDUCR_GROUP		GENMASK(3, 0)


/* WTBL : 0x820D8000/pcie(0x38000) rbus(0x438000) */
#define MT_DBG_WTBL_BASE			0x820D8000

/* PLE related CRs. */
#define MT_DBG_PLE_BASE				0x820C0000
#define MT_DBG_PLE(ofs)				(MT_DBG_PLE_BASE + (ofs))

#define MT_DBG_PLE_DRR_TAB_CTRL			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_DRR_TABLE_CTRL))
#define MT_DBG_PLE_DRR_TAB_RD_OFS		__DBG_REG_OFFS(dev, DBG_PLE_DRR_TABLE_RDATA)

#define MT_DBG_PLE_DRR_TABLE_RDATA0		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x0)
#define MT_DBG_PLE_DRR_TABLE_RDATA1		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x4)
#define MT_DBG_PLE_DRR_TABLE_RDATA2		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x8)
#define MT_DBG_PLE_DRR_TABLE_RDATA3		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0xc)
#define MT_DBG_PLE_DRR_TABLE_RDATA4		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x10)
#define MT_DBG_PLE_DRR_TABLE_RDATA5		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x14)
#define MT_DBG_PLE_DRR_TABLE_RDATA6		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS + 0x18)
#define MT_DBG_PLE_DRR_TABLE_RDATA7		MT_DBG_PLE(MT_DBG_PLE_DRR_TAB_RD_OFS+ 0x1c)

#define MT_DBG_PLE_PBUF_CTRL_ADDR		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_PBUF_CTRL))
#define MT_DBG_PLE_QUEUE_EMPTY			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_QUEUE_EMPTY))
#define MT_DBG_PLE_FREEPG_CNT			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_FREEPG_CNT))
#define MT_DBG_PLE_FREEPG_HEAD_TAIL		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_FREEPG_HEAD_TAIL))
#define MT_DBG_PLE_PG_HIF_GROUP			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_PG_HIF_GROUP))
#define MT_DBG_PLE_HIF_PG_INFO			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_HIF_PG_INFO))
#define MT_DBG_PLE_PG_HIF_TXCMD_GROUP		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_PG_HIF_TXCMD_GROUP))
#define MT_DBG_PLE_HIF_TXCMD_PG_INFO		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_HIF_TXCMD_PG_INFO))
#define MT_DBG_PLE_PG_CPU_GROUP			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_PG_CPU_GROUP))
#define MT_DBG_PLE_CPU_PG_INFO			MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_CPU_PG_INFO))
#define PLE_FL_QUE_CTRL_OFFSET			__DBG_REG_OFFS(dev, DBG_PLE_FL_QUE_CTRL)
#define MT_DBG_PLE_FL_QUE_CTRL0			MT_DBG_PLE(PLE_FL_QUE_CTRL_OFFSET + 0x0)
#define MT_DBG_PLE_FL_QUE_CTRL1			MT_DBG_PLE(PLE_FL_QUE_CTRL_OFFSET + 0x4)
#define MT_DBG_PLE_FL_QUE_CTRL2			MT_DBG_PLE(PLE_FL_QUE_CTRL_OFFSET + 0x8)
#define MT_DBG_PLE_FL_QUE_CTRL3			MT_DBG_PLE(PLE_FL_QUE_CTRL_OFFSET + 0xc)
#define MT_DBG_PLE_NATIVE_TXCMD_Q_EMPTY		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_NATIVE_TXCMD_Q_EMPTY))
#define MT_DBG_PLE_TXCMD_Q_EMPTY		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_TXCMD_Q_EMPTY))

#define MT_DBG_PLE_PBUF_CTRL_PAGE_SIZE_MASK		BIT(31)
#define MT_DBG_PLE_PBUF_CTRL_OFFSET_MASK 		GENMASK(25, 17)
#define MT_DBG_PLE_PBUF_CTRL_TOTAL_PAGE_NUM_MASK	GENMASK(11, 0)

#define MT_DBG_PLE_FREEPG_CNT_FREEPG_CNT_MASK		GENMASK(11, 0)
#define MT_DBG_PLE_FREEPG_CNT_FFA_CNT_MASK		GENMASK(27, 16)
#define MT_DBG_PLE_FREEPG_HEAD_TAIL_FREEPG_TAIL_MASK	GENMASK(27, 16)
#define MT_DBG_PLE_FREEPG_HEAD_TAIL_FREEPG_HEAD_MASK	GENMASK(11, 0)
#define MT_DBG_PLE_PG_HIF_GROUP_HIF_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PLE_PG_HIF_GROUP_HIF_MIN_QUOTA_MASK	GENMASK(11, 0)

#define MT_DBG_PLE_HIF_PG_INFO_HIF_SRC_CNT_MASK		GENMASK(27, 16)
#define MT_DBG_PLE_HIF_PG_INFO_HIF_RSV_CNT_MASK		GENMASK(11, 0)

#define MT_DBG_PLE_PG_HIF_TXCMD_GROUP_HIF_TXCMD_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PLE_PG_HIF_TXCMD_GROUP_HIF_TXCMD_MIN_QUOTA_MASK	GENMASK(11, 0)

#define MT_DBG_PLE_HIF_TXCMD_PG_INFO_HIF_TXCMD_SRC_CNT_MASK	GENMASK(27, 16)
#define MT_DBG_PLE_HIF_TXCMD_PG_INFO_HIF_TXCMD_RSV_CNT_MASK	GENMASK(11, 0)

#define MT_DBG_PLE_TXCMD_PG_INFO_HIF_TXCMD_SRC_CNT_MASK GENMASK(27, 16)
#define MT_DBG_PLE_TXCMD_PG_INFO_HIF_TXCMD_RSV_CNT_MASK	GENMASK(11, 0)

#define MT_DBG_PLE_PG_CPU_GROUP_CPU_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PLE_PG_CPU_GROUP_CPU_MIN_QUOTA_MASK 	GENMASK(11, 0)

#define MT_DBG_PLE_CPU_PG_INFO_CPU_SRC_CNT_MASK		GENMASK(27, 16)
#define MT_DBG_PLE_CPU_PG_INFO_CPU_RSV_CNT_MASK 	GENMASK(11, 0)

#define MT_DBG_PLE_Q_EMPTY_ALL_AC_EMPTY_MASK		BIT(24)
#define MT_DBG_PLE_FL_QUE_CTRL0_EXECUTE_MASK		BIT(31)
#define MT_DBG_PLE_FL_QUE_CTRL0_Q_BUF_QID_MASK 		GENMASK(30, 24)

#define MT_PLE_FL_QUE_CTRL0_Q_BUF_QID_SHFT		24
#define MT_PLE_FL_QUE_CTRL0_Q_BUF_PID_SHFT             	10

#define MT_DBG_PLE_FL_QUE_CTRL2_Q_TAIL_FID_MASK		GENMASK(27, 16)
#define MT_DBG_PLE_FL_QUE_CTRL2_Q_HEAD_FID_MASK		GENMASK(11, 0)
#define MT_DBG_PLE_FL_QUE_CTRL3_Q_PKT_NUM_MASK		GENMASK(11, 0)

#define MT_DBG_PLE_STATION_PAUSE(n)		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_STATION_PAUSE) + ((n) << 2))
#define MT_DBG_PLE_DIS_STA_MAP(n)		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_DIS_STA_MAP) + ((n) << 2))
#define MT_DBG_PLE_AC_QEMPTY(ac, n)		MT_DBG_PLE(__DBG_REG_OFFS(dev, DBG_PLE_AC_QEMPTY) +	\
							   __DBG_REG_OFFS(dev, DBG_PLE_AC_OFFSET) * (ac) + ((n) << 2))

#define MT_DBG_PLE_AMSDU_PACK_MSDU_CNT(n)	MT_DBG_PLE(0x10e0 + ((n) << 2))

/* pseinfo related CRs. */
#define MT_DBG_PSE_BASE				0x820C8000
#define MT_DBG_PSE(ofs)				(MT_DBG_PSE_BASE + (ofs))

#define MT_DBG_PSE_PBUF_CTRL			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PBUF_CTRL))
#define MT_DBG_PSE_QUEUE_EMPTY			MT_DBG_PSE(0x0b0)
#define MT_DBG_PSE_FREEPG_CNT			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_FREEPG_CNT))
#define MT_DBG_PSE_FREEPG_HEAD_TAIL		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_FREEPG_HEAD_TAIL))
#define MT_DBG_PSE_PG_HIF0_GROUP		MT_DBG_PSE(0x110)
#define MT_DBG_PSE_HIF0_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_HIF0_PG_INFO))
#define MT_DBG_PSE_PG_HIF1_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_HIF1_GROUP))
#define MT_DBG_PSE_HIF1_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_HIF1_PG_INFO))
#define MT_DBG_PSE_PG_CPU_GROUP			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_CPU_GROUP))
#define MT_DBG_PSE_CPU_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_CPU_PG_INFO))
#define MT_DBG_PSE_PG_LMAC0_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_LMAC0_GROUP))
#define MT_DBG_PSE_LMAC0_PG_INFO		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_LMAC0_PG_INFO))
#define MT_DBG_PSE_PG_LMAC1_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_LMAC1_GROUP))
#define MT_DBG_PSE_LMAC1_PG_INFO		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_LMAC1_PG_INFO))
#define MT_DBG_PSE_PG_LMAC2_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_LMAC2_GROUP))
#define MT_DBG_PSE_LMAC2_PG_INFO		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_LMAC2_PG_INFO))
#define MT_DBG_PSE_PG_PLE_GROUP			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_PLE_GROUP))
#define MT_DBG_PSE_PLE_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PLE_PG_INFO))
#define MT_DBG_PSE_PG_LMAC3_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_LMAC3_GROUP))
#define MT_DBG_PSE_LMAC3_PG_INFO		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_LMAC3_PG_INFO))
#define MT_DBG_PSE_PG_MDP_GROUP			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_MDP_GROUP))
#define MT_DBG_PSE_MDP_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_MDP_PG_INFO))
#define MT_DBG_PSE_PG_PLE1_GROUP		MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PG_PLE1_GROUP))
#define MT_DBG_PSE_PLE1_PG_INFO			MT_DBG_PSE(__DBG_REG_OFFS(dev, DBG_PSE_PLE1_PG_INFO))

#define MT_DBG_PSE_PBUF_CTRL_PAGE_SIZE_CFG_MASK		BIT(31)
#define MT_DBG_PSE_PBUF_CTRL_PBUF_OFFSET_MASK		GENMASK(25, 17)
#define MT_DBG_PSE_PBUF_CTRL_TOTAL_PAGE_NUM_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_QUEUE_EMPTY_RLS_Q_EMTPY_MASK		BIT(31)
#define MT_DBG_PSE_QUEUE_EMPTY_MDP_RXIOC_QUEUE_EMPTY_MASK	BIT(23)
#define MT_DBG_PSE_QUEUE_EMPTY_MDP_TXIOC_QUEUE_EMPTY_MASK 	BIT(22)
#define MT_DBG_PSE_QUEUE_EMPTY_SFD_PARK_QUEUE_EMPTY_MASK 	BIT(21)
#define MT_DBG_PSE_QUEUE_EMPTY_SEC_RX_QUEUE_EMPTY_SHFT   	BIT(20)
#define MT_DBG_PSE_QUEUE_EMPTY_SEC_TX_QUEUE_EMPTY_MASK 	BIT(19)
#define MT_DBG_PSE_QUEUE_EMPTY_MDP_RX_QUEUE_EMPTY_MASK	BIT(18)
#define MT_DBG_PSE_QUEUE_EMPTY_MDP_TX_QUEUE_EMPTY_MASK  BIT(17)
#define MT_DBG_PSE_QUEUE_EMPTY_LMAC_TX_QUEUE_EMPTY_MASK BIT(16)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_5_EMPTY_MASK		BIT(13)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_4_EMPTY_MASK	   	BIT(12)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_3_EMPTY_MASK		BIT(11)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_2_EMPTY_MASK	   	BIT(10)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_1_EMPTY_MASK		BIT(9)
#define MT_DBG_PSE_QUEUE_EMPTY_HIF_0_EMPTY_MASK	   	BIT(8)
#define MT_DBG_PSE_QUEUE_EMPTY_CPU_Q3_EMPTY_MASK	BIT(3)
#define MT_DBG_PSE_QUEUE_EMPTY_CPU_Q2_EMPTY_MASK	BIT(2)
#define MT_DBG_PSE_QUEUE_EMPTY_CPU_Q1_EMPTY_MASK	BIT(1)
#define MT_DBG_PSE_QUEUE_EMPTY_CPU_Q0_EMPTY_MASK	BIT(0)
#define MT_DBG_PSE_FREEPG_CNT_FFA_CNT_MASK		GENMASK(27, 16)
#define MT_DBG_PSE_FREEPG_CNT_FREEPG_CNT_MASK	   	GENMASK(11, 0)
#define MT_DBG_PSE_FREEPG_HEAD_TAIL_FREEPG_TAIL_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_FREEPG_HEAD_TAIL_FREEPG_HEAD_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PG_HIF0_GROUP_HIF0_MAX_QUOTA_MASK 	GENMASK(27, 16)
#define MT_DBG_PSE_PG_HIF0_GROUP_HIF0_MIN_QUOTA_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_PG_HIF0_GROUP_HIF0_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_PG_HIF0_GROUP_HIF0_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_HIF0_PG_INFO_HIF0_SRC_CNT_MASK 	GENMASK(27, 16)
#define MT_DBG_PSE_HIF0_PG_INFO_HIF0_RSV_CNT_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_PG_HIF1_GROUP_HIF1_MAX_QUOTA_MASK 	GENMASK(27, 16)
#define MT_DBG_PSE_PG_HIF1_GROUP_HIF1_MIN_QUOTA_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_HIF1_PG_INFO_HIF1_SRC_CNT_MASK   	GENMASK(27, 16)
#define MT_DBG_PSE_HIF1_PG_INFO_HIF1_RSV_CNT_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_CPU_PG_INFO_CPU_SRC_CNT_MASK    	GENMASK(27, 16)
#define MT_DBG_PSE_CPU_PG_INFO_CPU_RSV_CNT_MASK		GENMASK(11, 0)
#define MT_DBG_PSE_PG_PLE_GROUP_PLE_MAX_QUOTA_MASK    	GENMASK(27, 16)
#define MT_DBG_PSE_PG_PLE_GROUP_PLE_MIN_QUOTA_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_PG_CPU_GROUP_CPU_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_PG_CPU_GROUP_CPU_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PLE_PG_INFO_PLE_SRC_CNT_MASK    	GENMASK(27, 16)
#define MT_DBG_PSE_PLE_PG_INFO_PLE_RSV_CNT_MASK		GENMASK(11, 0)
#define MT_DBG_PSE_PG_LMAC0_GROUP_LMAC0_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_PG_LMAC0_GROUP_LMAC0_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_LMAC0_PG_INFO_LMAC0_SRC_CNT_MASK   	GENMASK(27, 16)
#define MT_DBG_PSE_LMAC0_PG_INFO_LMAC0_RSV_CNT_MASK   	GENMASK(11, 0)
#define MT_DBG_PSE_PG_LMAC1_GROUP_LMAC1_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_TOP_PG_LMAC1_GROUP_LMAC1_MIN_QUOTA_MASK 	GENMASK(11, 0)
#define MT_DBG_PSE_LMAC1_PG_INFO_LMAC1_SRC_CNT_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_LMAC1_PG_INFO_LMAC1_RSV_CNT_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PG_LMAC2_GROUP_LMAC2_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_PG_LMAC2_GROUP_LMAC2_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_LMAC2_PG_INFO_LMAC2_SRC_CNT_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_LMAC2_PG_INFO_LMAC2_RSV_CNT_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PG_LMAC3_GROUP_LMAC3_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_TOP_PG_LMAC3_GROUP_LMAC3_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_LMAC3_PG_INFO_LMAC3_SRC_CNT_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_LMAC3_PG_INFO_LMAC3_RSV_CNT_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PG_LMAC3_GROUP_LMAC3_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_TOP_PG_LMAC3_GROUP_LMAC3_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_PG_MDP_GROUP_MDP_MAX_QUOTA_MASK	GENMASK(27, 16)
#define MT_DBG_PSE_PG_MDP_GROUP_MDP_MIN_QUOTA_MASK	GENMASK(11, 0)
#define MT_DBG_PSE_MDP_PG_INFO_MDP_SRC_CNT_MASK		GENMASK(27, 16)
#define MT_DBG_PSE_MDP_PG_INFO_MDP_RSV_CNT_MASK		GENMASK(11, 0)

#define MT_DBG_PSE_FL_QUE_CTRL_0_ADDR			MT_DBG_PLE(0x1b0)
#define MT_DBG_PSE_FL_QUE_CTRL_0_EXECUTE_MASK	   	BIT(31)
#define MT_DBG_PSE_FL_QUE_CTRL_0_Q_BUF_QID_SHFT         24
#define MT_DBG_PSE_FL_QUE_CTRL_0_Q_BUF_PID_SHFT         10
#define MT_DBG_PSE_FL_QUE_CTRL_0_Q_BUF_WLANID_MASK    	GENMASK(9, 0)

#define MT_DBG_PSE_FL_QUE_CTRL_2_ADDR			MT_DBG_PLE(0x1b8)
#define MT_DBG_PSE_FL_QUE_CTRL_2_QUEUE_TAIL_FID_MASK    GENMASK(27, 16)
#define MT_DBG_PSE_FL_QUE_CTRL_2_QUEUE_HEAD_FID_MASK    GENMASK(11, 0)

#define MT_DBG_PSE_FL_QUE_CTRL_3_ADDR			MT_DBG_PLE(0x1bc)
#define MT_DBG_PSE_FL_QUE_CTRL_3_QUEUE_PKT_NUM_MASK    	GENMASK(11, 0)


/* AGG */
#define MT_DBG_AGG_BASE(_band)			((_band) ? 0x820f2000 : 0x820e2000)
#define MT_DBG_AGG(_band, ofs)			(MT_DBG_AGG_BASE(_band) + (ofs))

#define MT_DBG_AGG_AALCR0(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AALCR0))
#define MT_DBG_AGG_AALCR1(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AALCR1))
#define MT_DBG_AGG_AALCR2(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AALCR2))
#define MT_DBG_AGG_AALCR3(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AALCR3))
#define MT_DBG_AGG_AALCR4(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AALCR4))
#define MT_DBG_AGG_B0BRR0(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_B0BRR0))
#define MT_DBG_AGG_B1BRR0(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_B1BRR0))
#define MT_DBG_AGG_B2BRR0(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_B2BRR0))
#define MT_DBG_AGG_B3BRR0(_band)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_B3BRR0))
#define MT_DBG_AGG_AWSCR(_band, n)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_AWSCR0) + ((n) << 2))
#define MT_DBG_AGG_PCR(_band, n)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_PCR0) + ((n) << 2))
#define MT_DBG_AGG_TTCR(_band, n)		MT_DBG_AGG((_band), __DBG_REG_OFFS(dev, DBG_AGG_TTCR0) + ((n) << 2))
#define MT_DBG_MIB_M0ARNG(_band, n)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0ARNG0) + ((n) << 2))
#define MT_DBG_MIB_M0DR2(_band, n)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR2) + ((n) << 2))
#define MT_DBG_MIB_M0DR13(_band, n)		MT_DBG_MIB((_band), __DBG_REG_OFFS(dev, DBG_MIB_M0DR13) + ((n) << 2))

#define MT_DBG_AGG_AALCR_ACx3_AGG_LIMIT_MASK   	GENMASK(31, 24)
#define MT_DBG_AGG_AALCR_ACx2_AGG_LIMIT_MASK  	GENMASK(23, 16)
#define MT_DBG_AGG_AALCR_ACx1_AGG_LIMIT_MASK  	GENMASK(15, 8)
#define MT_DBG_AGG_AALCR_ACx0_AGG_LIMIT_MASK  	GENMASK(7, 0)
#define MT_DBG_AGG_AALCR4_ALTX0_AGG_LIMIT_MASK  GENMASK(7, 0)

#define MT_DBG_AGG_AWSCR0_WINSIZE3_MASK	   	GENMASK(31, 24)
#define MT_DBG_AGG_AWSCR0_WINSIZE2_MASK   	GENMASK(23, 16)
#define MT_DBG_AGG_AWSCR0_WINSIZE1_MASK  	GENMASK(15, 8)
#define MT_DBG_AGG_AWSCR0_WINSIZE0_MASK  	GENMASK(7, 0)

#define MT_DBG_AGG_AWSCR1_WINSIZE7_MASK	   	GENMASK(31, 24)
#define MT_DBG_AGG_AWSCR1_WINSIZE6_MASK   	GENMASK(23, 16)
#define MT_DBG_AGG_AWSCR1_WINSIZE5_MASK  	GENMASK(15, 8)
#define MT_DBG_AGG_AWSCR1_WINSIZE4_MASK  	GENMASK(7, 0)

#define MT_DBG_AGG_AWSCR2_WINSIZEB_MASK	   	GENMASK(31, 24)
#define MT_DBG_AGG_AWSCR2_WINSIZEA_MASK   	GENMASK(23, 16)
#define MT_DBG_AGG_AWSCR2_WINSIZE9_MASK  	GENMASK(15, 8)
#define MT_DBG_AGG_AWSCR2_WINSIZE8_MASK  	GENMASK(7, 0)

#define MT_DBG_AGG_AWSCR3_WINSIZEE_MASK  	GENMASK(23, 16)
#define MT_DBG_AGG_AWSCR3_WINSIZED_MASK  	GENMASK(15, 8)
#define MT_DBG_AGG_AWSCR3_WINSIZEC_MASK  	GENMASK(7, 0)

#define MT_DBG_MIB_M0ARNG0_AGG_RANG_SEL3_MASK	GENMASK(31, 24)
#define MT_DBG_MIB_M0ARNG0_AGG_RANG_SEL2_MASK   GENMASK(23, 16)
#define MT_DBG_MIB_M0ARNG0_AGG_RANG_SEL1_MASK  	GENMASK(15, 8)
#define MT_DBG_MIB_M0ARNG0_AGG_RANG_SEL0_MASK  	GENMASK(7, 0)

#define MT_DBG_MIB_M0ARNG1_AGG_RANG_SEL7_MASK	GENMASK(31, 24)
#define MT_DBG_MIB_M0ARNG1_AGG_RANG_SEL6_MASK	GENMASK(23, 16)
#define MT_DBG_MIB_M0ARNG1_AGG_RANG_SEL5_MASK  	GENMASK(15, 8)
#define MT_DBG_MIB_M0ARNG1_AGG_RANG_SEL4_MASK  	GENMASK(7, 0)

#define MT_DBG_MIB_M0ARNG2_AGG_RANG_SEL11_MASK	GENMASK(31, 24)
#define MT_DBG_MIB_M0ARNG2_AGG_RANG_SEL10_MASK	GENMASK(23, 16)
#define MT_DBG_MIB_M0ARNG2_AGG_RANG_SEL9_MASK  	GENMASK(15, 8)
#define MT_DBG_MIB_M0ARNG2_AGG_RANG_SEL8_MASK  	GENMASK(7, 0)

#define MT_DBG_MIB_M0ARNG3_AGG_RANG_SEL14_MASK	GENMASK(23, 16)
#define MT_DBG_MIB_M0ARNG3_AGG_RANG_SEL13_MASK  GENMASK(15, 8)
#define MT_DBG_MIB_M0ARNG3_AGG_RANG_SEL12_MASK	GENMASK(7, 0)

#define MT_DBG_MIB_M0DR2_TRX_AGG_RANGE1_CNT_MASK	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR2_TRX_AGG_RANGE0_CNT_MASK	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR3_TRX_AGG_RANGE3_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR3_TRX_AGG_RANGE2_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR4_TRX_AGG_RANGE5_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR4_TRX_AGG_RANGE4_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR5_TRX_AGG_RANGE7_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR5_TRX_AGG_RANGE6_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR13_TRX_AGG_RANGE9_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR13_TRX_AGG_RANGE8_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR14_TRX_AGG_RANGE11_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR14_TRX_AGG_RANGE10_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR15_TRX_AGG_RANGE13_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR15_TRX_AGG_RANGE12_CNT_MASK  	GENMASK(15, 0)
#define MT_DBG_MIB_M0DR16_TRX_AGG_RANGE15_CNT_MASK  	GENMASK(31, 16)
#define MT_DBG_MIB_M0DR16_TRX_AGG_RANGE14_CNT_MASK  	GENMASK(15, 0)

/* mt7915 host DMA*/
#define MT_DBG_INT_DMA1_R0_DONE			BIT(0)
#define MT_DBG_INT_DMA1_R1_DONE			BIT(1)
#define MT_DBG_INT_DMA1_R2_DONE			BIT(2)

#define MT_DBG_INT_DMA1_T16_DONE		BIT(26)
#define MT_DBG_INT_DMA1_T17_DONE		BIT(27)
#define MT_DBG_INT_DMA1_T18_DONE		BIT(30)
#define MT_DBG_INT_DMA1_T19_DONE		BIT(31)
#define MT_DBG_INT_DMA1_T20_DONE		BIT(15)

#define MT_DBG_EXT_WRAP_INT_DMA0_R0_DONE	BIT(16)
#define MT_DBG_EXT_WRAP_INT_DMA0_R1_DONE	BIT(17)

/* mt7986 host DMA */
#define MT_DBG_INT_DMA0_R0_DONE			BIT(0)
#define MT_DBG_INT_DMA0_R1_DONE			BIT(1)
#define MT_DBG_INT_DMA0_R2_DONE			BIT(2)
#define MT_DBG_INT_DMA0_R3_DONE			BIT(3)
#define MT_DBG_INT_DMA0_R4_DONE			BIT(22)
#define MT_DBG_INT_DMA0_R5_DONE			BIT(23)

#define MT_DBG_INT_DMA0_T16_DONE		BIT(26)
#define MT_DBG_INT_DMA0_T17_DONE		BIT(27)
#define MT_DBG_INT_DMA0_T18_DONE		BIT(30)
#define MT_DBG_INT_DMA0_T19_DONE		BIT(31)
#define MT_DBG_INT_DMA0_T20_DONE		BIT(25)

/* MCU DMA */
#define WF_WFDMA_MCU_DMA0_BASE					0x54000000
#define WF_WFDMA_MCU_DMA0_HOST_INT_STA_ADDR			(WF_WFDMA_MCU_DMA0_BASE + 0x200) // 0200
#define WF_WFDMA_MCU_DMA0_HOST_INT_ENA_ADDR			(WF_WFDMA_MCU_DMA0_BASE + 0X204) // 0204
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_ADDR			(WF_WFDMA_MCU_DMA0_BASE + 0x208) // 0208
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_RX_DMA_BUSY_MASK	0x00000008	// RX_DMA_BUSY[3]
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_RX_DMA_BUSY_SHFT	3
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_RX_DMA_EN_MASK		0x00000004	// RX_DMA_EN[2]
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_RX_DMA_EN_SHFT		2
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_TX_DMA_BUSY_MASK	0x00000002	// TX_DMA_BUSY[1]
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_TX_DMA_BUSY_SHFT	1
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_TX_DMA_EN_MASK		0x00000001	// TX_DMA_EN[0]
#define WF_WFDMA_MCU_DMA0_WPDMA_GLO_CFG_TX_DMA_EN_SHFT	0

#define WF_WFDMA_MCU_DMA1_BASE					0x55000000
#define WF_WFDMA_MCU_DMA1_HOST_INT_STA_ADDR			(WF_WFDMA_MCU_DMA1_BASE + 0x200) // 0200
#define WF_WFDMA_MCU_DMA1_HOST_INT_ENA_ADDR			(WF_WFDMA_MCU_DMA1_BASE + 0X204) // 0204
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_ADDR			(WF_WFDMA_MCU_DMA1_BASE + 0x208) // 0208
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_RX_DMA_BUSY_MASK	0x00000008	// RX_DMA_BUSY[3]
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_RX_DMA_BUSY_SHFT	3
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_RX_DMA_EN_MASK		0x00000004	// RX_DMA_EN[2]
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_RX_DMA_EN_SHFT		2
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_TX_DMA_BUSY_MASK	0x00000002	// TX_DMA_BUSY[1]
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_TX_DMA_BUSY_SHFT	1
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_TX_DMA_EN_MASK		0x00000001	// TX_DMA_EN[0]
#define WF_WFDMA_MCU_DMA1_WPDMA_GLO_CFG_TX_DMA_EN_SHFT		0
#define WF_WFDMA_MCU_DMA1_WPDMA_TX_RING0_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x300) // 0300
#define WF_WFDMA_MCU_DMA1_WPDMA_TX_RING1_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x310) // 0310
#define WF_WFDMA_MCU_DMA1_WPDMA_TX_RING2_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x320) // 0320
#define WF_WFDMA_MCU_DMA1_WPDMA_RX_RING0_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x500) // 0500
#define WF_WFDMA_MCU_DMA1_WPDMA_RX_RING1_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x510) // 0510
#define WF_WFDMA_MCU_DMA1_WPDMA_RX_RING2_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x520) // 0520
#define WF_WFDMA_MCU_DMA1_WPDMA_RX_RING3_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x530) // 0530
#define WF_WFDMA_MCU_DMA1_WPDMA_RX_RING4_CTRL0_ADDR		(WF_WFDMA_MCU_DMA1_BASE + 0x540) // 0540

#define WF_WFDMA_MCU_DMA1_PCIE1_BASE				0x59000000
#define WF_WFDMA_MCU_DMA1_PCIE1_HOST_INT_STA_ADDR		(WF_WFDMA_MCU_DMA1_PCIE1_BASE + 0x200) // 0200
#define WF_WFDMA_MCU_DMA1_PCIE1_HOST_INT_ENA_ADDR		(WF_WFDMA_MCU_DMA1_PCIE1_BASE + 0X204) // 0204
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_ADDR		(WF_WFDMA_MCU_DMA1_PCIE1_BASE + 0x208) // 0208
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_RX_DMA_BUSY_MASK	0x00000008	// RX_DMA_BUSY[3]
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_RX_DMA_BUSY_SHFT	3
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_RX_DMA_EN_MASK	0x00000004	// RX_DMA_EN[2]
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_RX_DMA_EN_SHFT	2
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_TX_DMA_BUSY_MASK	0x00000002	// TX_DMA_BUSY[1]
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_TX_DMA_BUSY_SHFT	1
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_TX_DMA_EN_MASK	0x00000001	// TX_DMA_EN[0]
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_GLO_CFG_TX_DMA_EN_SHFT	0
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_TX_RING2_CTRL0_ADDR	(WF_WFDMA_MCU_DMA1_PCIE1_BASE + 0x320) // 0320
#define WF_WFDMA_MCU_DMA1_PCIE1_WPDMA_RX_RING3_CTRL0_ADDR	(WF_WFDMA_MCU_DMA1_PCIE1_BASE + 0x530) // 0530

#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING0_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x300) // 0300
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING1_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x310) // 0310
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING2_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x320) // 0320
/* mt7986 add */
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING3_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x330) // 0330
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING4_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x340) // 0340
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING5_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x350) // 0350
#define WF_WFDMA_MCU_DMA0_WPDMA_TX_RING6_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x360) // 0360


#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING0_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x500) // 0500
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING1_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x510) // 0510
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING2_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x520) // 0520
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING3_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x530) // 0530
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING4_CTRL0_ADDR		(WF_WFDMA_MCU_DMA0_BASE + 0x540) // 0540

/* mt7986 add */
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING5_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x550) // 0550
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING6_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x560) // 0560
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING7_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x570) // 0570
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING8_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x580) // 0580
#define WF_WFDMA_MCU_DMA0_WPDMA_RX_RING9_CTRL0_ADDR     	(WF_WFDMA_MCU_DMA0_BASE + 0x590) // 0590

/* MEM DMA */
#define WF_WFDMA_MEM_DMA_BASE					0x58000000
#define WF_WFDMA_MEM_DMA_HOST_INT_STA_ADDR			(WF_WFDMA_MEM_DMA_BASE + 0x200) // 0200
#define WF_WFDMA_MEM_DMA_HOST_INT_ENA_ADDR			(WF_WFDMA_MEM_DMA_BASE + 0X204) // 0204
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_ADDR			(WF_WFDMA_MEM_DMA_BASE + 0x208) // 0208
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_RX_DMA_BUSY_MASK		0x00000008	// RX_DMA_BUSY[3]
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_RX_DMA_BUSY_SHFT		3
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_RX_DMA_EN_MASK		0x00000004	// RX_DMA_EN[2]
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_RX_DMA_EN_SHFT		2
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_TX_DMA_BUSY_MASK		0x00000002	// TX_DMA_BUSY[1]
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_TX_DMA_BUSY_SHFT		1
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_TX_DMA_EN_MASK		0x00000001	// TX_DMA_EN[0]
#define WF_WFDMA_MEM_DMA_WPDMA_GLO_CFG_TX_DMA_EN_SHFT		0
#define WF_WFDMA_MEM_DMA_WPDMA_TX_RING0_CTRL0_ADDR		(WF_WFDMA_MEM_DMA_BASE + 0x300) // 0300
#define WF_WFDMA_MEM_DMA_WPDMA_TX_RING1_CTRL0_ADDR		(WF_WFDMA_MEM_DMA_BASE + 0x310) // 0310
#define WF_WFDMA_MEM_DMA_WPDMA_RX_RING0_CTRL0_ADDR		(WF_WFDMA_MEM_DMA_BASE + 0x500) // 0500
#define WF_WFDMA_MEM_DMA_WPDMA_RX_RING1_CTRL0_ADDR		(WF_WFDMA_MEM_DMA_BASE + 0x510) // 0510

enum resource_attr {
	HIF_TX_DATA,
	HIF_TX_CMD,
	HIF_TX_CMD_WM, /* direct path to WMCPU, only exist for WFDMA arch with 2 CPU */
	HIF_TX_FWDL,
	HIF_RX_DATA,
	HIF_RX_EVENT,
	RING_ATTR_NUM
};

struct hif_pci_tx_ring_desc {
	u32 hw_int_mask;
	u16 ring_size;
	enum resource_attr ring_attr;
	u8 band_idx;
	char *const ring_info;
};

struct hif_pci_rx_ring_desc {
	u32 hw_desc_base;
	u32 hw_int_mask;
	u16 ring_size;
	enum resource_attr ring_attr;
	u16 max_rx_process_cnt;
	u16 max_sw_read_idx_inc;
	char *const ring_info;
};

const struct hif_pci_tx_ring_desc mt7915_tx_ring_layout[] = {
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_T16_DONE,
	 .ring_size = 128,
	 .ring_attr = HIF_TX_FWDL,
	 .ring_info = "FWDL"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_T17_DONE,
	 .ring_size = 256,
	 .ring_attr = HIF_TX_CMD_WM,
	 .ring_info = "cmd to WM"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_T18_DONE,
	 .ring_size = 2048,
	 .ring_attr = HIF_TX_DATA,
	 .ring_info = "band0 TXD"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_T19_DONE,
	 .ring_size = 2048,
	 .ring_attr = HIF_TX_DATA,
	 .ring_info = "band1 TXD"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_T20_DONE,
	 .ring_size = 256,
	 .ring_attr = HIF_TX_CMD,
	 .ring_info = "cmd to WA"
	}
};

const struct hif_pci_rx_ring_desc mt7915_rx_ring_layout[] = {
	{
	 .hw_int_mask = MT_DBG_EXT_WRAP_INT_DMA0_R0_DONE,
	 .ring_size = 1536,
	 .ring_attr = HIF_RX_DATA,
	 .ring_info = "band0 RX data"
	},
	{
	 .hw_int_mask = MT_DBG_EXT_WRAP_INT_DMA0_R1_DONE,
	 .ring_size = 1536,
	 .ring_attr = HIF_RX_DATA,
	 .ring_info = "band1 RX data"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_R0_DONE,
	 .ring_size = 512,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "event from WM"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_R1_DONE,
	 .ring_size = 1024,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "event from WA band0"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA1_R2_DONE,
	 .ring_size = 512,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "event from WA band1"
	}
};

const struct hif_pci_tx_ring_desc mt7986_tx_ring_layout[] = {
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_T16_DONE,
	 .ring_size = 128,
	 .ring_attr = HIF_TX_FWDL,
	 .ring_info = "FWDL"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_T17_DONE,
	 .ring_size = 256,
	 .ring_attr = HIF_TX_CMD_WM,
	 .ring_info = "cmd to WM"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_T18_DONE,
	 .ring_size = 2048,
	 .ring_attr = HIF_TX_DATA,
	 .ring_info = "band0 TXD"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_T19_DONE,
	 .ring_size = 2048,
	 .ring_attr = HIF_TX_DATA,
	 .ring_info = "band1 TXD"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_T20_DONE,
	 .ring_size = 256,
	 .ring_attr = HIF_TX_CMD,
	 .ring_info = "cmd to WA"
	}
};

const struct hif_pci_rx_ring_desc mt7986_rx_ring_layout[] = {
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R4_DONE,
	 .ring_size = 1536,
	 .ring_attr = HIF_RX_DATA,
	 .ring_info = "band0 RX data"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R5_DONE,
	 .ring_size = 1536,
	 .ring_attr = HIF_RX_DATA,
	 .ring_info = "band1 RX data"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R0_DONE,
	 .ring_size = 512,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "event from WM"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R1_DONE,
	 .ring_size = 512,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "event from WA"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R2_DONE,
	 .ring_size = 1024,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "STS WA band0"
	},
	{
	 .hw_int_mask = MT_DBG_INT_DMA0_R3_DONE,
	 .ring_size = 512,
	 .ring_attr = HIF_RX_EVENT,
	 .ring_info = "STS WA band1"
	},
};

/* mibinfo related CRs. */
#define BN0_WF_MIB_TOP_BASE                                    0x820ed000
#define BN1_WF_MIB_TOP_BASE                                    0x820fd000

#define BN0_WF_MIB_TOP_BTOCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x400) // D400
#define BN0_WF_MIB_TOP_BTBCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x428) // D428
#define BN0_WF_MIB_TOP_BTDCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x4F0) // D4F0

#define BN0_WF_MIB_TOP_BSDR0_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x688) // D688
#define BN0_WF_MIB_TOP_BSDR1_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x690) // D690

#define BN0_WF_MIB_TOP_BSDR2_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x518) // D518
#define BN0_WF_MIB_TOP_BSDR3_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x520) // D520
#define BN0_WF_MIB_TOP_BSDR4_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x528) // D528
#define BN0_WF_MIB_TOP_BSDR5_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x530) // D530
#define BN0_WF_MIB_TOP_BSDR6_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x538) // D538

#define BN0_WF_MIB_TOP_BROCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x5B8) // D5B8
#define BN0_WF_MIB_TOP_BRBCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x5E0) // D5E0
#define BN0_WF_MIB_TOP_BRDCR_ADDR                              (BN0_WF_MIB_TOP_BASE + 0x630) // D630

#define BN0_WF_MIB_TOP_M0SDR0_BEACONTXCOUNT_MASK               0x0000FFFF // BEACONTXCOUNT[15..0]

#define BN0_WF_MIB_TOP_M0SDR4_RX_FIFO_FULL_COUNT_MASK          0x0000FFFF // RX_FIFO_FULL_COUNT[15..0]

#define BN0_WF_MIB_TOP_M0SDR5_RX_MPDU_COUNT_MASK               0xFFFFFFFF // RX_MPDU_COUNT[31..0]

#define BN0_WF_MIB_TOP_M0SDR6_CHANNEL_IDLE_COUNT_MASK          0x0000FFFF // CHANNEL_IDLE_COUNT[15..0]

#define BN1_WF_MIB_TOP_BTOCR_ADDR                              (BN1_WF_MIB_TOP_BASE + 0x400) // D400

#define BN0_WF_MIB_TOP_M0SDR7_VEC_MISS_COUNT_MASK              0x0000FFFF // VEC_MISS_COUNT[15..0]
#define BN0_WF_MIB_TOP_M0SDR8_DELIMITER_FAIL_COUNT_MASK        0x0000FFFF // DELIMITER_FAIL_COUNT[15..0]
#define BN0_WF_MIB_TOP_M0SDR9_CCA_NAV_TX_TIME_MASK             0x00FFFFFF // CCA_NAV_TX_TIME[23..0]

#define BN0_WF_MIB_TOP_M0SDR11_RX_LEN_MISMATCH_MASK            0x0000FFFF // RX_LEN_MISMATCH[15..0]

#define BN0_WF_MIB_TOP_M0SDR16_P_CCA_TIME_MASK                 0x00FFFFFF // P_CCA_TIME[23..0]
#define BN0_WF_MIB_TOP_M0SDR17_S_CCA_TIME_MASK                 0x00FFFFFF // S_CCA_TIME[23..0]
#define BN0_WF_MIB_TOP_M0SDR18_P_ED_TIME_MASK                  0x00FFFFFF // P_ED_TIME[23..0]
#define BN0_WF_MIB_TOP_M0SDR19_CCK_MDRDY_TIME_MASK             0x00FFFFFF // CCK_MDRDY_TIME[23..0]
#define BN0_WF_MIB_TOP_M0SDR20_OFDM_LG_MIXED_VHT_MDRDY_TIME_MASK 0x00FFFFFF  // OFDM_LG_MIXED_VHT_MDRDY_TIME[23..0]
#define BN0_WF_MIB_TOP_M0SDR21_OFDM_GREEN_MDRDY_TIME_MASK      0x00FFFFFF // OFDM_GREEN_MDRDY_TIME[23..0]

#define BN0_WF_MIB_TOP_M0SDR22_ADDR                            (BN0_WF_MIB_TOP_BASE + 0x60) // D060
#define BN0_WF_MIB_TOP_M0SDR23_ADDR                            (BN0_WF_MIB_TOP_BASE + 0x64) // D064

#define BN0_WF_MIB_TOP_M0SDR34_MUBF_TX_COUNT_MASK              0x0000FFFF                // MUBF_TX_COUNT[15..0]

#define BN0_WF_MIB_TOP_M0DR0_TX_40MHZ_CNT_MASK                 0xFFFF0000                // TX_40MHZ_CNT[31..16]
#define BN0_WF_MIB_TOP_M0DR0_TX_40MHZ_CNT_SHFT                 16
#define BN0_WF_MIB_TOP_M0DR0_TX_20MHZ_CNT_MASK                 0x0000FFFF                // TX_20MHZ_CNT[15..0]
#define BN0_WF_MIB_TOP_M0DR0_TX_20MHZ_CNT_SHFT                 0

#define BN0_WF_MIB_TOP_M0DR1_TX_160MHZ_CNT_MASK                0xFFFF0000                // TX_160MHZ_CNT[31..16]
#define BN0_WF_MIB_TOP_M0DR1_TX_160MHZ_CNT_SHFT                16
#define BN0_WF_MIB_TOP_M0DR1_TX_80MHZ_CNT_MASK                 0x0000FFFF                // TX_80MHZ_CNT[15..0]
#define BN0_WF_MIB_TOP_M0DR1_TX_80MHZ_CNT_SHFT                 0

#define BN0_WF_MIB_TOP_M0DR6_TX_DDLMT_RNG2_CNT_MASK            0xFFFF0000                // TX_DDLMT_RNG2_CNT[31..16]
#define BN0_WF_MIB_TOP_M0DR6_TX_DDLMT_RNG2_CNT_SHFT            16
#define BN0_WF_MIB_TOP_M0DR6_TX_DDLMT_RNG1_CNT_MASK            0x0000FFFF                // TX_DDLMT_RNG1_CNT[15..0]
#define BN0_WF_MIB_TOP_M0DR6_TX_DDLMT_RNG1_CNT_SHFT            0

#define BN0_WF_MIB_TOP_M0DR7_TX_DDLMT_RNG4_CNT_MASK            0xFFFF0000                // TX_DDLMT_RNG4_CNT[31..16]
#define BN0_WF_MIB_TOP_M0DR7_TX_DDLMT_RNG4_CNT_SHFT            16
#define BN0_WF_MIB_TOP_M0DR7_TX_DDLMT_RNG3_CNT_MASK            0x0000FFFF                // TX_DDLMT_RNG3_CNT[15..0]
#define BN0_WF_MIB_TOP_M0DR7_TX_DDLMT_RNG3_CNT_SHFT            0

#define BN0_WF_MIB_TOP_M0DR10_MU_FAIL_PPDU_CNT_MASK            0x0000FFFF                // MU_FAIL_PPDU_CNT[15..0]

#define BN0_WF_MIB_TOP_M0B0SDR0_ADDR                           (BN0_WF_MIB_TOP_BASE + 0x100) // D100
#define BN0_WF_MIB_TOP_M0B0SDR0_RTSRETRYCOUNT_MASK             0xFFFF0000                // RTSRETRYCOUNT[31..16]
#define BN0_WF_MIB_TOP_M0B0SDR0_RTSRETRYCOUNT_SHFT             16
#define BN0_WF_MIB_TOP_M0B0SDR0_RTSTXCOUNT_MASK                0x0000FFFF                // RTSTXCOUNT[15..0]
#define BN0_WF_MIB_TOP_M0B0SDR0_RTSTXCOUNT_SHFT                0
#define BN0_WF_MIB_TOP_M0B0SDR1_ADDR                           (BN0_WF_MIB_TOP_BASE + 0x104) // D104
#define BN0_WF_MIB_TOP_M0B0SDR1_ACKFAILCOUNT_MASK              0xFFFF0000                // ACKFAILCOUNT[31..16]
#define BN0_WF_MIB_TOP_M0B0SDR1_ACKFAILCOUNT_SHFT              16
#define BN0_WF_MIB_TOP_M0B0SDR1_BAMISSCOUNT_MASK               0x0000FFFF                // BAMISSCOUNT[15..0]
#define BN0_WF_MIB_TOP_M0B0SDR1_BAMISSCOUNT_SHFT               0
#define BN0_WF_MIB_TOP_M0B0SDR2_ADDR                           (BN0_WF_MIB_TOP_BASE + 0x108) // D108
#define BN0_WF_MIB_TOP_M0B0SDR2_FRAMERETRY2COUNT_MASK          0xFFFF0000                // FRAMERETRY2COUNT[31..16]
#define BN0_WF_MIB_TOP_M0B0SDR2_FRAMERETRY2COUNT_SHFT          16
#define BN0_WF_MIB_TOP_M0B0SDR2_FRAMERETRYCOUNT_MASK           0x0000FFFF                // FRAMERETRYCOUNT[15..0]
#define BN0_WF_MIB_TOP_M0B0SDR2_FRAMERETRYCOUNT_SHFT           0
#define BN0_WF_MIB_TOP_M0B0SDR3_ADDR                           (BN0_WF_MIB_TOP_BASE + 0x10C) // D10C
#define BN0_WF_MIB_TOP_M0B0SDR3_FRAMERETRY3COUNT_MASK          0x0000FFFF                // FRAMERETRY3COUNT[15..0]
#define BN0_WF_MIB_TOP_M0B0SDR3_FRAMERETRY3COUNT_SHFT          0
#define BN0_WF_MIB_TOP_M0DR12_TX_DDLMT_RNG0_CNT_MASK           0x0000FFFF                // TX_DDLMT_RNG0_CNT[15..0]


#define BN0_WF_MIB_TOP_BTOCR_TX_OK_COUNT2np1_MASK              0xFFFF0000                // TX_OK_COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BTOCR_TX_OK_COUNT2np1_SHFT              16
#define BN0_WF_MIB_TOP_BTOCR_TX_OK_COUNT2n_MASK                0x0000FFFF                // TX_OK_COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BTOCR_TX_OK_COUNT2n_SHFT                0

#define BN0_WF_MIB_TOP_BTDCR_TX_DATA_COUNT2np1_MASK            0xFFFF0000                // TX_DATA_COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BTDCR_TX_DATA_COUNT2np1_SHFT            16
#define BN0_WF_MIB_TOP_BTDCR_TX_DATA_COUNT2n_MASK              0x0000FFFF                // TX_DATA_COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BTDCR_TX_DATA_COUNT2n_SHFT              0

#define BN0_WF_MIB_TOP_BROCR_RX_OK_COUNT2np1_MASK              0xFFFF0000                // RX_OK_COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BROCR_RX_OK_COUNT2np1_SHFT              16
#define BN0_WF_MIB_TOP_BROCR_RX_OK_COUNT2n_MASK                0x0000FFFF                // RX_OK_COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BROCR_RX_OK_COUNT2n_SHFT                0

#define BN0_WF_MIB_TOP_BRDCR_RX_DATA_COUNT2np1_MASK            0xFFFF0000                // RX_DATA_COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BRDCR_RX_DATA_COUNT2np1_SHFT            16
#define BN0_WF_MIB_TOP_BRDCR_RX_DATA_COUNT2n_MASK              0x0000FFFF                // RX_DATA_COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BRDCR_RX_DATA_COUNT2n_SHFT              0

#define BN0_WF_MIB_TOP_BSDR0_RTSTXCOUNT2np1_MASK               0xFFFF0000                // RTSTXCOUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR0_RTSTXCOUNT2np1_SHFT               16
#define BN0_WF_MIB_TOP_BSDR0_RTSTXCOUNT2n_MASK                 0x0000FFFF                // RTSTXCOUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR0_RTSTXCOUNT2n_SHFT                 0

#define BN0_WF_MIB_TOP_BSDR1_RTSRETRYCOUNT2np1_MASK            0xFFFF0000                // RTSRETRYCOUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR1_RTSRETRYCOUNT2np1_SHFT            16
#define BN0_WF_MIB_TOP_BSDR1_RTSRETRYCOUNT2n_MASK              0x0000FFFF                // RTSRETRYCOUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR1_RTSRETRYCOUNT2n_SHFT              0

#define BN0_WF_MIB_TOP_BSDR2_BAMISSCOUNT2np1_MASK              0xFFFF0000                // BAMISSCOUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR2_BAMISSCOUNT2np1_SHFT              16
#define BN0_WF_MIB_TOP_BSDR2_BAMISSCOUNT2n_MASK                0x0000FFFF                // BAMISSCOUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR2_BAMISSCOUNT2n_SHFT                0

#define BN0_WF_MIB_TOP_BSDR3_ACKFAILCOUNT2np1_MASK             0xFFFF0000                // ACKFAILCOUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR3_ACKFAILCOUNT2np1_SHFT             16
#define BN0_WF_MIB_TOP_BSDR3_ACKFAILCOUNT2n_MASK               0x0000FFFF                // ACKFAILCOUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR3_ACKFAILCOUNT2n_SHFT               0

#define BN0_WF_MIB_TOP_BSDR4_FRAMERETRYCOUNT2np1_MASK          0xFFFF0000                // FRAMERETRYCOUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR4_FRAMERETRYCOUNT2np1_SHFT          16
#define BN0_WF_MIB_TOP_BSDR4_FRAMERETRYCOUNT2n_MASK            0x0000FFFF                // FRAMERETRYCOUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR4_FRAMERETRYCOUNT2n_SHFT            0

#define BN0_WF_MIB_TOP_BSDR5_FRAMERETRY2COUNT2np1_MASK         0xFFFF0000                // FRAMERETRY2COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR5_FRAMERETRY2COUNT2np1_SHFT         16
#define BN0_WF_MIB_TOP_BSDR5_FRAMERETRY2COUNT2n_MASK           0x0000FFFF                // FRAMERETRY2COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR5_FRAMERETRY2COUNT2n_SHFT           0

#define BN0_WF_MIB_TOP_BSDR6_FRAMERETRY3COUNT2np1_MASK         0xFFFF0000                // FRAMERETRY3COUNT2np1[31..16]
#define BN0_WF_MIB_TOP_BSDR6_FRAMERETRY3COUNT2np1_SHFT         16
#define BN0_WF_MIB_TOP_BSDR6_FRAMERETRY3COUNT2n_MASK           0x0000FFFF                // FRAMERETRY3COUNT2n[15..0]
#define BN0_WF_MIB_TOP_BSDR6_FRAMERETRY3COUNT2n_SHFT           0
/* TXD */

#define MT_TXD1_ETYP			BIT(15)
#define MT_TXD1_VLAN			BIT(14)
#define MT_TXD1_RMVL			BIT(13)
#define MT_TXD1_AMS			BIT(13)
#define MT_TXD1_EOSP			BIT(12)
#define MT_TXD1_MRD			BIT(11)

#define MT_TXD7_CTXD			BIT(26)
#define MT_TXD7_CTXD_CNT		GENMASK(25, 23)
#define MT_TXD7_TAT			GENMASK(9, 0)

#endif
#endif
